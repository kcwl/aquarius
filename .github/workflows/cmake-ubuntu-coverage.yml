# This starter workflow is for a CMake project running on multiple platforms. There is a different starter workflow if you just want a single platform.
# See: https://github.com/actions/starter-workflows/blob/main/ci/cmake-single-platform.yml
name: ubuntu(coverage)

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

jobs:
  gcc-build-cov:
    runs-on: ${{ matrix.os }}

    strategy:
      # Set fail-fast to false to ensure that feedback is delivered for all matrix combinations. Consider changing this to true when your workflow is stable.
      fail-fast: false

      # Set up a matrix to run the following 3 configurations:
      # 1. <Windows, Release, latest MSVC compiler toolchain on the default runner image, default generator>
      # 2. <Linux, Release, latest GCC compiler toolchain on the default runner image, default generator>
      # 3. <Linux, Release, latest Clang compiler toolchain on the default runner image, default generator>
      #
      # To add more build types (Release, Debug, RelWithDebInfo, etc.) customize the build_type list.
      matrix:
        os: [ubuntu-latest]
        build_type: [Debug]
        c_compiler: [gcc]
        include:
          - os: ubuntu-latest
            c_compiler: gcc
            cpp_compiler: g++

    steps:
    - uses: actions/checkout@v3
      with:
         submodules: recursive

    - name: set reusable strings
      # Turn repeated input strings (such as the build output directory) into step outputs. These step outputs can be used throughout the workflow file.
      id: strings
      shell: bash
      run: |
        echo "build-output-dir=${{ github.workspace }}/build_coverage" >> "$GITHUB_OUTPUT"

    # - name: Cache Vcpkg
    #   id: cache-aquarius
    #   uses: actions/cache@v4
    #   env:
    #     VCPKG_ROOT: ${{ github.workspace }}/vcpkg
    #   with:
    #     path: |
    #         ${{ env.VCPKG_ROOT }}
    #         ${{ github.workspace }}/vcpkg_installed
    #         !${{ env.VCPKG_ROOT }}/.git
    #         ${{ env.VCPKG_ROOT }}/buildtrees
    #         ${{ env.VCPKG_ROOT }}/packages
    #         ${{ env.VCPKG_ROOT }}/downloads
    #     key: |
    #         ${{ hashFiles( 'vcpkg.json' ) }}-${{ runner.os }}-cache-key-cover

    - name: test gcc/g++
      shell: sh
      run: |
        gcc --version
        g++ --version
        gcov --version


    - name: install lcov
      shell: sh
      run: |
         sudo apt install -y lcov

    # - name: install boost-1.89
    #   shell: bash
    #   run: |
    #     sudo add-apt-repository ppa:kcwl-ppa/libboost1.89-dev
    #     sudo apt update
    #     sudo apt-get install -y boost

    # - name: install gcovr
    #   shell: bash
    #   run: |
    #      sudo apt-get install -y pip
    #      pip install gcovr

    - name: config vcpkg
      shell: bash
      run: |
        sudo apt-get update
        sudo apt-get install -y autoconf automake autoconf-archive ninja-build
        git clone https://github.com/microsoft/vcpkg.git temp
        mkdir -p vcpkg
        mv temp/.git vcpkg/.git
        cd vcpkg
        git pull
        git checkout .
        ./bootstrap-vcpkg.sh -disableMetrics

    - name: Configure CMake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      # -DBOOST_SHARED_FLAG=true
      run: >
        cmake -B ${{ steps.strings.outputs.build-output-dir }}
        -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }}
        -DCMAKE_C_COMPILER=${{ matrix.c_compiler }}
        -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
        -DCOVERAGE=true
        -S ${{ github.workspace }}
        -DCMAKE_TOOLCHAIN_FILE=${{ github.workspace }}/vcpkg/scripts/buildsystems/vcpkg.cmake
        -DVCPKG_INSTALL_OPTIONS=--x-abi-tools-use-exact-versions

    - name: Build
      # Build your program with the given configuration. Note that --config is needed because the default Windows generator is a multi-config generator (Visual Studio generator).
      run: cmake --build ${{ steps.strings.outputs.build-output-dir }} --config ${{ matrix.build_type }}

    - name: Copy CRT
      shell: bash
      run: >
        cp -r ${{ github.workspace }}/crt ${{ steps.strings.outputs.build-output-dir }}/test

    - name: Test
      working-directory: ${{ steps.strings.outputs.build-output-dir }}
      # Execute tests defined by the CMake configuration. Note that --build-config is needed because the default Windows generator is a multi-config generator (Visual Studio generator).
      # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
      run: ctest --build-config ${{ matrix.build_type }} --output-on-failure

    - name: generate codecov report
      working-directory: ${{ github.workspace }}/build_coverage
      run: |
          make coverage

    - name: upload coverage reports
      uses: romeovs/lcov-reporter-action@v0.2.16
      with:
        lcov-file: ./test/coverage-aquarius.info